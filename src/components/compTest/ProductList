// ProductList.test.tsx

import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import ProductList from './ProductList'; // Убедитесь, что путь к файлу ProductList.tsx правильный
import type { Product } from '../../types/Product'; // Убедитесь, что путь к типу Product правильный
import ProductCard from '../productCart/ProductCart'; // Убедитесь, что путь к компоненту ProductCard правильный
import ProductCartSkeleton from '../productCartSkeleton/ProductCartSkeleton'; // Убедитесь, что путь к компоненту ProductCartSkeleton правильный

// Мок для ProductCard, чтобы не рендерить его реальную реализацию
vi.mock('../productCart/ProductCart', () => ({
  default: ({ product }: { product: Product }) => (
    <div data-testid="mock-product-card" data-product-id={product.id}>
      Mock ProductCard: {product.name}
    </div>
  ),
}));

// Мок для ProductCartSkeleton, чтобы не рендерить его реальную реализацию
vi.mock('../productCartSkeleton/ProductCartSkeleton', () => ({
  default: () => <div data-testid="mock-skeleton-card">Mock Skeleton</div>,
}));

// Пример фиктивного типа Product, если не импортируется из другого места
// type Product = {
//   id: number;
//   name: string;
//   price: number;
//   image: string;
//   category: string;
// };

// Фиктивные данные для тестов
const mockProduct1: Product = {
  id: 1,
  name: 'Test Product 1',
  price: 100,
  image: 'https://example.com/test1.jpg',

};

const mockProduct2: Product = {
  id: 2,
  name: 'Test Product 2',
  price: 50,
  image: 'https://example.com/test2.jpg',
 
};

const mockProducts: Product[] = [mockProduct1, mockProduct2];

describe('ProductList', () => {
  const mockOnAddToCart = vi.fn();

  // Вспомогательная функция для рендера компонента с нужными пропсами
  const renderProductList = (products: Product[] = [], loading: boolean = false) => {
    render(
      <ProductList
        products={products}
        loading={loading}
        onAddToCart={mockOnAddToCart}
      />
    );
  };

  it('renders skeleton cards when loading is true', () => {
    const skeletonCount = 8; // Как определено в компоненте
    renderProductList([], true); // Рендерим с loading=true, пустой массив

    // Проверяем, что отображаются мок-компоненты заглушек
    const skeletonCards = screen.getAllByTestId('mock-skeleton-card');
    expect(skeletonCards).toHaveLength(skeletonCount);

    // Проверяем, что *не* отображаются мок-компоненты реальных карточек
    expect(screen.queryByTestId('mock-product-card')).not.toBeInTheDocument();
  });

  it('renders product cards when loading is false and products are provided', () => {
    renderProductList(mockProducts, false); // Рендерим с loading=false, массив с товарами

    // Проверяем, что отображаются мок-компоненты реальных карточек для каждого товара
    expect(screen.getByText(`Mock ProductCard: ${mockProduct1.name}`)).toBeInTheDocument();
    expect(screen.getByText(`Mock ProductCard: ${mockProduct2.name}`)).toBeInTheDocument();

    // Проверяем, что *не* отображаются мок-компоненты заглушек
    expect(screen.queryByTestId('mock-skeleton-card')).not.toBeInTheDocument();
  });

  it('renders no cards when loading is false and products array is empty', () => {
    renderProductList([], false); // Рендерим с loading=false, пустой массив

    // Проверяем, что *не* отображаются ни мок-компоненты реальных карточек, ни заглушек
    expect(screen.queryByTestId('mock-product-card')).not.toBeInTheDocument();
    expect(screen.queryByTestId('mock-skeleton-card')).not.toBeInTheDocument();
  });

  it('renders the correct number of skeleton cards based on skeletonCount variable', () => {
    const customSkeletonCount = 4; // Предположим, вы хотите протестировать другое количество
    // Для этого теста нужно либо захардкодить количество, либо экспортировать skeletonCount из компонента для тестирования.
    // Более реалистично протестировать значение, захардкоженное в компоненте.
    const expectedSkeletonCount = 8; // Значение из компонента

    renderProductList([], true);

    const skeletonCards = screen.getAllByTestId('mock-skeleton-card');
    expect(skeletonCards).toHaveLength(expectedSkeletonCount);
  });
});