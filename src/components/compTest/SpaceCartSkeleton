// ProductCartSkeleton.test.tsx
import { render, screen } from '@testing-library/react';
import { describe, it, expect } from 'vitest';
import ProductCartSkeleton from './ProductCartSkeleton'; // Убедитесь, что путь к файлу ProductCartSkeleton.tsx правильный

describe('ProductCartSkeleton', () => {
  it('renders the skeleton card structure', () => {
    render(<ProductCartSkeleton />);

    // Проверяем, что рендерится основной Card компонент
    const card = screen.getByRole('article'); // Card Mantine обычно использует role="article"
    expect(card).toBeInTheDocument();
    expect(card).toHaveStyle({ height: '412px', width: '302px', borderRadius: '24px' }); // Проверка основных стилей Card

    // Проверяем, что рендерится Card.Section
    const cardSection = screen.getByTestId('mantine-Card-root'); // Некоторые версии Mantine могут добавлять testId, иначе ищите по структуре
    // Альтернатива: найти Card.Section по вложенным элементам
    expect(screen.getByTestId('mantine-Card-root')).toBeInTheDocument(); // Или проверить через `container` и `querySelector`
    // Лучше проверить через дочерние элементы:
    // 1. Card.Section содержит Box
    const skeletonBox = screen.getByTestId('mantine-Box-root'); // Аналогично, может зависеть от версии Mantine
    // Альтернатива: найти Box по стилю или содержимому
    expect(skeletonBox).toBeInTheDocument();
    expect(skeletonBox).toHaveStyle({ backgroundColor: '#F3F5FA', width: '276px', height: '276px', margin: '16px', borderRadius: '8px' });

    // Проверяем, что рендерится иконка faBars внутри Box
    const barsIcon = screen.getByIconName('bars'); // getByIconName требует настройки jest-dom/matchers для FontAwesomeIcon, либо используйте другую стратегию
    // Альтернатива: проверить, что внутри Box есть элемент с SVG (FontAwesome генерирует SVG)
    expect(skeletonBox.querySelector('svg')).toBeInTheDocument(); // Проверяет наличие SVG элемента внутри Box
    // Или, если FontAwesomeIcon имеет определенный класс или aria-label:
    // expect(screen.getByLabelText('bars')).toBeInTheDocument(); // Если добавлен aria-label
    // expect(screen.getByTestId('fa-bars-icon')).toBeInTheDocument(); // Если добавлен data-testid

    // Проверяем, что рендерится Group
    const group = screen.getByTestId('mantine-Group-root'); // Или ищите по структуре
    // Альтернатива: Group - это div с определенными стилями, проверьте его наличие как дочерний элемент Card
    expect(group).toBeInTheDocument();
    expect(group).toHaveStyle({ justifyContent: 'space-between', marginTop: '16px', marginBottom: '16px', alignItems: 'center', height: '150px' }); // Проверка стилей Group (преобразованные Mantine стили)
  });

  // Дополнительный тест: проверка, что иконка faBars отображается
  it('displays the faBars icon', () => {
    render(<ProductCartSkeleton />);

    // Найдите Box, содержащий иконку
    const skeletonBox = screen.getByTestId('mantine-Box-root'); // Или найдите через стили, если testId не доступен
    // Если testId не работает, можно искать Box по стилю:
    // const skeletonBox = screen.getByRole('generic', { style: { backgroundColor: '#F3F5FA', ... } });

    // Проверьте, что внутри Box есть SVG элемент (от FontAwesomeIcon)
    expect(skeletonBox.querySelector('svg')).toBeInTheDocument();

    // Проверьте, что SVG элемент имеет правильный путь/атрибуты, соответствующие иконке faBars (опционально, сложно без специфичных атрибутов)
    // const svgElement = skeletonBox.querySelector('svg');
    // expect(svgElement).toHaveAttribute('data-icon', 'bars'); // FontAwesomeIcon может добавлять такие атрибуты
  });

  // Тест: проверка, что компонент не содержит реального текста или изображений продукта
  it('does not render actual product content', () => {
    render(<ProductCartSkeleton />);

    // Проверьте, что в компоненте нет текста, который был бы в реальной карточке (например, названия продукта)
    expect(screen.queryByText(/.*product name.*/i)).not.toBeInTheDocument();

    // Проверьте, что в компоненте нет реального изображения продукта (например, по alt тексту или src)
    expect(screen.queryByRole('img')).not.toBeInTheDocument(); // В скелете не должно быть <img>

    // Проверьте, что в компоненте нет кнопок "Add to cart" или других интерактивных элементов реальной карточки
    expect(screen.queryByRole('button', { name: /add to cart/i })).not.toBeInTheDocument();
  });
});